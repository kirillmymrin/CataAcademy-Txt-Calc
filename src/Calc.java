import java.util.Scanner;


// Калькулятор умеет выполнять операции сложения строк, вычитания строки из строки,
//  умножения строки на число и деления строки на число: "a" + "b", "a" - "b", "a" * b, "a" / b.

// Данные передаются в одну строку(смотрите пример)! Решения, в которых каждая строка,
//  число и арифмитеческая операция передаются с новой строки считаются неверными.

// Значения строк передаваемых в выражении выделяются двойными кавычками.

// Результатом сложения двух строк, является строка состоящая из переданных.

// Результатом деления строки на число n, является строка в n раз короче исходной (смотрите пример).

// Результатом умножения строки на число n, является строка, в которой переданная строка повторяется ровно n раз.

// Результатом вычитания строки из строки, является строка, в которой удалена переданная подстрока или сама исходная строка,
//  если в нее нет вхождения вычитаемой строки (смотрите пример).

// Калькулятор должен принимать на вход числа от 1 до 10 включительно, не более.

// И строки длинной не более 10 символов. Если строка, полученная в результате работы приложения длинее 40 симовлов, то в выводе после 40 символа должны стоять три точки (...)

// Калькулятор умеет работать только с целыми числами.

// Первым аргументом выражения, подаваемого на вход, должна быть строка, при вводе пользователем выражения вроде 3 + "hello",
//  калькулятор должен выбросить исключение и прекратить свою работу.

// При вводе пользователем неподходящих чисел, строк или неподдерживаемых операций
//  (например, деление строки на строку) приложение выбрасывает исключение и завершает свою работу.

// При вводе пользователем выражения, не соответствующего одной из вышеописанных арифметических операций,
//  приложение выбрасывает исключение и завершает свою работу.

//Пример работы программы:
//Input:
//"100" + "500"
//
//Output:
//"100500"
//
//Input:
//"Hi World!" - "World!"
//
//Output:
//"Hi "
//
//Input:
//"Bye-bye!" - "World!"
//
//Output:
//"Bye-bye!"
//"
//Input:
//"Java" * 5
//
//Output:
//"JavaJavaJavaJavaJava"
//
//Input:
//"Example!!!" / 3
//
//Output:
//"Exa"
//
//Принципы оценки работы:
//Обратите внимание на принципы ООП, постарайтесь разбить программу на логические классы.
// Решения, в которых весь код программы находится в одном классе будут низко оценены.
// Продемонстрируйте своё умение в работе с разными синтаксическими конструкциями,
// не забудьте про исключительные ситуации, при которых выполнение программы невозможно из-за некорректных входных данных.


public class Calc {
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in); // Создаем сканер для считывания  сконсоли
        String exp = scn.nextLine(); // считываем то что ввел пользыватель
        char action; //
        String[] data; // создаем массив строк
        if (exp.contains("+")) {        // При помощи метода contains проверяем знак, если знак есть сплитим по этому знаку!
            data = exp.split("\\+");      // разделяем по +
            action = '+';                       // запоминаем знак
        } else if (exp.contains("-")) { //
            data = exp.split("-");//
            action = '-';//
        } else if (exp.contains(" * ")) {
            data = exp.split("\\*");
            action = '*';
        } else if (exp.contains(" / ")) {
            data = exp.split("/");
            action = '/';
        } else {
            throw new Exception("Невернный ввод знака действия");
        }
        if (action == '*' || action == '/') {
            if (data[1].contains("\"")) throw new Exception("Строку можно делить и умножать только на число!");
        } // если знак дейсвия был умнож.,или дел.,если второй элемент содержит ковычку мы выбросим искл., и прекратим работу программы
        // элемента удаляем ковычки , пример: "java"*5// итог -> javajavajavajavajava
        for (int i = 0; i < data.length; i++){
            data[i] = data[i].replace("\"", "");
            // Удаление ковычек,запуск цикла по всем элементам и из каждого
        }

        if (action == '+') {
            printInq(data[0] + data[1]);  //System.out.println(data[0]+data[1]); //
        } else if (action == '*') {
            int multiplier = Integer.parseInt(data[1]); // конвертируем 2 число из типа string в тип int
            String result = ""; // создаю строчку
            for (int i = 0; i < multiplier; i++) {
                result+=data[0]; // к это строке мы складываем 5 раз строчку java
            }
            printInq(result);
        } else if (action == '-') {
            int index = data[0].indexOf(data[1]);// для того что бы сделать вычитание нужно из строчки найти: место где входит 2 строчка
            // и его удалить , для этого существует метод: indexOf этот метод смотрит на наличие 1 строки во 2 и если оно есть то с какого
            // индекса оно начинается !indexOf - возвращает индекс строки и мы получаем индекс! если бы данной строки не было в исходной мы получили бы индекс -1
            // если индекс равен -1 то нам не нужно делать какие то вычетания и мы просто выводим строку!
            if (index == -1) {
                printInq(data[0]);
            } else {
                String result = data[0].substring(0, index);// извлекаем из исходной строки под строку ,начиная с индекса:0
                // заканчивая индексом который мы извлекли в предедущей операции
                // например Hi world!!! - substring извлекает подстроку из всей строчки с индекса 0 до индекса 3 = Hi ,
                // 2 дейсвие - после world идет продолжение, значит я извлекаю из строчки подстроку начиная с того места
                // как узнать длинну слова ? - взять место от куда оно начинается и прибавить к нему длинну слова Hi world
                // -> значит я беру подстроку начиная с 9 индекса = world! и до конца строки !
                result += data[0].substring(index + data[1].length());
                printInq(result);
            }
        } else {
            int newlen = data[0].length()/Integer.parseInt(data[1]);// по заданию после деления наша строчка должна быть в : N - раз,
            // короче чем была изначально, я беру исходню длинну и делю ее на то число которое ввел юзер!Тк.к инт на инт дробной части не будет
            String result = data[0].substring(0,newlen);// используем тот же метод substring при помощи которого мы извлекаем из изходной строчки
            // символом начиная с 0 индекса заканчивая новой длинной, тем самым получаем результат из N символов
            printInq(result);
        }
    }
        static void printInq (String text){ // создали метод printInq - который выводит на экран результат
            System.out.println("\""+text+"\"");
        }
    }

